package characterString;
/**
 * 
 * @author 陈奎
 * 题目描述
 * 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
 * 路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
 * 如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 
 * 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，
 * 但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
 */
public class path {
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
    	boolean[] visited = new boolean[matrix.length];
    	for(int i=0;i<rows;i++){
    		for(int j=0;j<cols;j++){
    			if(helper(matrix,rows,cols,i,j,0,str,visited)){
    				return true;
    			}
    		}
    	}
    	return false;        
    }

	private boolean helper(char[] matrix, int rows, int cols, int i, int j, int k, char[] str, boolean[] visited) {
		if(i<0||i>=rows||j<0||j>=cols||matrix[i*cols+j]!=str[k]||visited[i*cols+j]){
			return false;
		}
		if(k==str.length-1) return true;
		visited[i*cols+j]=true;
		if(helper(matrix, rows, cols, i-1, j, k+1, str, visited)||helper(matrix, rows, cols, i+1, j, k+1, str, visited)
				||helper(matrix, rows, cols, i, j-1, k+1, str, visited)||helper(matrix, rows, cols, i, j+1, k+1, str, visited)){
			return true;
		}
		visited[i*cols+j]=false;
		return false;
	}

}
